#!/usr/bin/env python3

"""
In jobs for which a very long period of data has to be backfilled,
this utility calculates which interval of data to be loaded, depending
on the number of days that have passed since the start of the backfilling.
The backfilling batches go backwards from the --until date specified.

Example with oozie job:
sudo -u analytics oozie job \
--oozie $OOZIE_URL -Duser=$USER \
$(./bin/oozie-day-intervals --backfill-start 20191104 --start 20151009 --end 20190727 --days 20) \
-submit -config oozie/cassandra/coord_mediarequest_per_file_daily.properties

Usage: oozie-day-intervals [options] [--help]

Options:
    -h --help                       Show this help message and exit.
    -b --backfilling-start=<date>   The day backfilling was started.
    -s --start=<date>               Start of data time range to backfill.
    -e --end=<date>                 End of data time range to backfill.
    -d --days=<days>                Length of backfilling intervals, in days.
"""

from datetime import datetime, date, timezone, timedelta
from docopt import docopt
import unittest

def main():
    test_results = unittest.main(verbosity=0, argv=[''], exit=False).result
    args = docopt(__doc__)
    days_per_interval = int(args['--days'])
    backfilling_start = parse_date(args['--backfilling-start'])
    data_start = parse_date(args['--start'])
    data_end = parse_date(args['--end'])
    today = datetime.today().date()
    print(get_oozie_formatted_interval(backfilling_start, data_start, data_end, days_per_interval, today))

def parse_date(string_date):
    year = int(string_date[0:4])
    month = int(string_date[4:6])
    day = int(string_date[6:8])
    return date(year, month, day)

def days_between_dates(start, end):
    delta = end - start
    return delta.days

def timerange_to_args(start, end):
    start_oozie_arg = '-Dstart_time='
    stop_oozie_arg = '-Dstop_time='
    formatted_start = start.strftime('%Y-%m-%dT00:00Z')
    formatted_end = end.strftime('%Y-%m-%dT00:00Z')
    return start_oozie_arg + formatted_start + ' ' + stop_oozie_arg + formatted_end

def get_oozie_formatted_interval(backfilling_start, data_start, data_end, days_per_interval, today):
    days_since_backfilling_started = days_between_dates(backfilling_start, today)
    interval_end_date = data_end - timedelta(days = days_per_interval * days_since_backfilling_started)
    if interval_end_date < data_start:
        raise ValueError('The start date of the data has been reached, there is nothing more to backfill.')
    interval_start_date = max(interval_end_date - timedelta(days = days_per_interval), data_start)
    return timerange_to_args(interval_start_date, interval_end_date)


class TestOozieIntervals(unittest.TestCase):
    def test_should_reduce_interval_if_data_range_shorter(self):
        backfilling_start = parse_date('20190101')
        days_per_interval = 10
        data_start = parse_date('20150101')
        data_end = parse_date('20150103') # One day should be enough to backfill
        today = parse_date('20190101') # Still backfilling 3 days later
        interval = get_oozie_formatted_interval(backfilling_start, data_start, data_end, days_per_interval, today)
        self.assertEqual(interval, '-Dstart_time=2015-01-01T00:00Z -Dstop_time=2015-01-03T00:00Z')

    def test_should_error_if_past_start_date(self):
        backfilling_start = parse_date('20190101')
        days_per_interval = 10
        data_start = parse_date('20150101')
        data_end = parse_date('20150103') # One day should be enough to backfill
        today = parse_date('20190103') # Still backfilling 3 days later
        self.assertRaises(ValueError, get_oozie_formatted_interval, backfilling_start, data_start, data_end, days_per_interval, today)

    def test_beginning_and_end_match_params(self):
        today = datetime.strptime('2019-11-01', '%Y-%m-%d').date()
        intervals = self.generate_all_intervals('20020101', '20040101', '20191101', 14, '20191101')
        self.assertEqual(intervals[0], '-Dstart_time=2003-12-18T00:00Z -Dstop_time=2004-01-01T00:00Z')
        self.assertEqual(intervals[-1], '-Dstart_time=2002-01-01T00:00Z -Dstop_time=2002-01-03T00:00Z')

    def test_last_interval_should_not_go_further_than_end_date(self):
        today = datetime.strptime('2019-11-01', '%Y-%m-%d').date()
        intervals = self.generate_all_intervals('20020101', '20040101', '20191101', 14, '20191101')
        final_interval_start_date = intervals[-1][13:23]
        final_interval_end_date = intervals[-1][43:53]
        self.assertEqual(final_interval_start_date, '2002-01-01')
        self.assertEqual(final_interval_end_date, '2002-01-03')

    def test_separation_between_intervals_should_be_correct(self):
        today = datetime.strptime('2019-11-01', '%Y-%m-%d').date()
        intervals = self.generate_all_intervals('20020101', '20040101', '20191101', 14, '20191101')
        # Check that given 2 consecutive intervals, there's a separation of 14 days between them
        interval_a_start_date = datetime.strptime(intervals[4][13:23], '%Y-%m-%d')
        interval_a_end_date = datetime.strptime(intervals[4][43:53], '%Y-%m-%d')
        interval_b_start_date = datetime.strptime(intervals[5][13:23], '%Y-%m-%d')
        interval_b_end_date = datetime.strptime(intervals[5][43:53], '%Y-%m-%d')
        # The delta is negative because we backfill backwards
        self.assertEqual(days_between_dates(interval_a_start_date, interval_b_start_date), -14)
        self.assertEqual(days_between_dates(interval_a_end_date, interval_b_end_date), -14)
        # Check that individual intervals are correctly separated
        self.assertEqual(days_between_dates(interval_a_start_date, interval_a_end_date), 14)

    def generate_all_intervals(data_start, data_end, backfilling_start, days_per_interval, today):
        intervals = []
        '''
        Simulating a backfill spread over 10 days, with 14 days per
        backfilling session, backfilling backwards in time
        '''
        today = parse_date(today)
        backfilling_start = parse_date(backfilling_start)
        data_start = parse_date(data_start)
        data_end = parse_date(data_end)
        intervals.append(get_oozie_formatted_interval(backfilling_start, data_start, data_end, days_per_interval, today))
        while data_start < datetime.strptime(intervals[-1][13:23], '%Y-%m-%d').date():
            today = today + timedelta(days = 1)
            formatted_interval = get_oozie_formatted_interval(backfilling_start, data_start, data_end, days_per_interval, today)
            intervals.append(formatted_interval)
        return intervals

if __name__ == '__main__':
    main()
