#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
rsync content from src to dst, either to-local or to-hdfs.
src and dst folders need to be absolute and to exist and their
realm, depending on the copy direction (for instance, if using
to-local, src needs to exist on HDFS and dst on local).

Note: Already existing file difference is verified using file-size.

Usage:
  hdfs-rsync [options] (to-local | to-hdfs) <src> <dst>

Options:
    -d --should-delete        If set, delete files in destination not
                                present in source.
    -l FILE --log-file FILE   The file to write logs.
                                logging to console if none provided.
    -x --no-dry-run           Actually execute the rsync.
                                Running without this parameter shows logs only,
                                and most of the time results in an error:
                                the check for copied files shows missing files
                                (obvisouly...)
    -h --help                 Show this help message and exit.
"""

__author__ = 'Joseph Allemandou <joal@wikimedia.org>'


import logging
import docopt

from refinery.logging_setup import configure_logging
from refinery.hdfs import Hdfs


logger = logging.getLogger()


def main(args):
    # assign local and hdfs path from src and dst
    # based on copy direction
    local_to_hdfs = args['to-hdfs']
    src = args['<src>']
    dst = args['<dst>']

    if not src.startswith('/') or not dst.startswith('/'):
        raise ValueError('dst and dst should be absolute')

    local_path = src if local_to_hdfs else dst
    hdfs_path = dst if local_to_hdfs else src

    log_file = args['--log-file']
    should_delete = args['--should-delete']
    dry_run = not args['--no-dry-run']

    if log_file:
        configure_logging(logger, logging.INFO, log_file=log_file)
    else:
        configure_logging(logger, logging.INFO, stdout=True)

    # Instanciate and run rsync
    Hdfs.rsync(local_path, hdfs_path, local_to_hdfs=local_to_hdfs,
               should_delete=should_delete, dry_run=dry_run)


if __name__ == "__main__":
    try:
        main(docopt.docopt(__doc__))
    except RuntimeError as e:
        logger.error(e)
        sys.exit(1)
