#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Creates, rotates and deletes criptographic salt files.

Usage: saltrotate [options] <file_path>

Options:
    -h --help                   Show this help message and exit.
    -p --period=<period_code>   Rotate the salt every such period.
                                Format: <N> <UNIT>. N must be a positive
                                integer. UNIT must be one of: hours, days,
                                months. Default: no rotation.
    -b --backup=<period_code>   Keep the old salt for such period.
                                Same format as -p/--period.
                                Default: no backup.
    -s --start=<iso_datetime>   Start counting rotation periods at this time.
                                Default: '1970-01-01T00:00:00Z'.
    --verbose                   Turn on verbose logging.
    --dry-run                   Don't actually apply any changes.
"""

from datetime import datetime, timezone
from dateutil import parser as datetime_parser, relativedelta
from docopt import docopt
from refinery.logging_setup import configure_logging
from refinery.hdfs import Hdfs
import logging
import os
import random
import re
import tempfile


SALT_LENGTH = 64
SALT_ALPHABET = list('0123456789abcdef')
BACKUP_EXTENSION = '.old'

logger = logging.getLogger()


def parse_period(period):
    if period is not None:
        if not re.match(r"^[0-9]+ (hours|days|months)$", period):
            raise Exception('Invalid period string: ' + period)
        count, unit = period.split()
        params = {}
        params[unit] = int(count)
        return relativedelta.relativedelta(**params)

def create_salt():
    chosen_chars = [random.choice(SALT_ALPHABET) for i in range(SALT_LENGTH)]
    return ''.join(chosen_chars)

def check_salt(hdfs_path, salt):
    logger.debug('Checking salt file integrity...')
    try:
        read_salt = Hdfs.cat(hdfs_path)
    except Exception as e:
        logger.error('Unable to read updated salt file.')
        raise e
    if read_salt != salt:
        logger.error('Verification of salt file contents failed.')
        raise Exception()
    logger.debug('Salt file integrity checked.')

def delete_salt(hdfs_path):
    try:
        Hdfs.rm([hdfs_path])
    except Exception as e:
        logger.error('Unable to delete backup file.')
        raise e

def rotate_salt(hdfs_path, backup=False):
    if backup:
        logger.debug('Copying old salt to backup file...')
        backup_salt = Hdfs.cat(hdfs_path)
        backup_path = hdfs_path + BACKUP_EXTENSION
        Hdfs.cp(hdfs_path, backup_path, force=True)
        check_salt(backup_path, backup_salt)
    new_salt = create_salt()
    logger.debug('Writing new salt to local temporary file...')
    local_dir = '/tmp/saltrotate/'
    if not os.path.exists(local_dir):
        os.makedirs(local_dir)
    file_descriptor, local_path = tempfile.mkstemp(dir=local_dir, text=True)
    with open(local_path, 'w') as salt_file:
        salt_file.write(new_salt)
    logger.debug('Copying salt file over to HDFS...')
    Hdfs.put(local_path, hdfs_path, force=True)
    logger.debug('Removing local temporary salt file...')
    os.remove(local_path)
    check_salt(hdfs_path, new_salt)

def process_salt(file_path, period_timedelta, backup, start_datetime, dry_run):
    logger.debug('Checking for existing salt file...')
    file_exists = len(Hdfs.ls([file_path])) > 0
    if file_exists:
        logger.debug('Salt file exists.')
        logger.debug('Checking whether salt needs rotation...')
        if period_timedelta is not None:
            current_datetime = datetime.now(timezone.utc)
            mod_datetime = Hdfs.get_modified_datetime(file_path)
            rotate_datetime = start_datetime
            while rotate_datetime <= mod_datetime:
                rotate_datetime += period_timedelta
            if rotate_datetime <= current_datetime:
                logger.debug('Salt needs rotation.')
                logger.info('Rotating existing salt...')
                if not dry_run:
                    rotate_salt(file_path, backup=backup)
            else:
                logger.info('Salt does not need rotation yet.')
        else:
            logger.info('No salt rotation specified.')
    else:
        logger.debug('Salt file does not exist.')
        logger.info('Creating new salt...')
        if not dry_run:
            rotate_salt(file_path)

def clean_backup(backup_path, period_timedelta, backup_timedelta, start_datetime, dry_run):
    logger.debug('Checking for existing backup file...')
    backup_exists = len(Hdfs.ls([backup_path])) > 0
    if backup_exists:
        logger.debug('Backup file exists.')
        logger.debug('Checking whether backup needs deletion...')
        if backup_timedelta is not None:
            current_datetime = datetime.now(timezone.utc)
            mod_datetime = Hdfs.get_modified_datetime(backup_path)
            rotate_datetime = start_datetime
            while rotate_datetime <= mod_datetime:
                rotate_datetime += period_timedelta
            deletion_datetime = rotate_datetime - period_timedelta + backup_timedelta
            if deletion_datetime <= current_datetime:
                logger.debug('Backup needs deletion.')
                logger.info('Deleting existing backup...')
                if not dry_run:
                    delete_salt(backup_path)
            else:
                logger.info('Backup does not need deletion yet.')
        else:
            logger.debug('Backup needs deletion.')
            logger.info('Deleting existing backup...')
            if not dry_run:
                delete_salt(backup_path)
    else:
        logger.debug('Backup file does not exist.')


if __name__ == '__main__':
    logger.info('Starting saltrotate.')

    # Parse arguments.
    arguments = docopt(__doc__)
    file_path = arguments['<file_path>']
    period_timedelta = parse_period(arguments['--period'])
    backup_timedelta = parse_period(arguments['--backup'])
    start_datetime = datetime_parser.parse(
        arguments['--start']
        if arguments['--start'] is not None
        else '1970-01-01T00:00:00Z'
    )
    verbose = arguments['--verbose']
    dry_run = arguments['--dry-run']

    # Configure logging.
    log_level = logging.DEBUG if verbose else logging.INFO
    configure_logging(logger, log_level, stdout=True)

    # Execute logic.
    process_salt(
        file_path,
        period_timedelta,
        backup_timedelta is not None,
        start_datetime,
        dry_run
    )
    clean_backup(
        file_path + BACKUP_EXTENSION,
        period_timedelta,
        backup_timedelta,
        start_datetime,
        dry_run
    )

    logger.info('Done!')
