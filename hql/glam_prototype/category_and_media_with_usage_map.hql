
-- This query decorates the category_and_media dataset generated by
-- the related Spark-Scala script in the refinery-source repository
-- with usage data: wikis, articles and view counts.

create external table if not exists `category_and_media_with_usage_map_2` (
    `page_id`          bigint                          COMMENT 'Page ID of the category in question',
    `page_type`        string                          COMMENT 'root, subcat or file',
    `category_paths`   array<array<bigint>>            COMMENT 'All paths from a primary category',
    `usage_map`        map<string, map<string, int>>   COMMENT 'Articles using the file by wiki with their pageview counts'
)
STORED AS PARQUET
LOCATION '/user/mforns/data/category_and_media_with_usage_map_2'
;

-- Get the page title for all glam media files.
-- These are needed to later join with the imagelinks table.
with glam_media_file_pages as (
    select
        cm.page_id,
        mp.page_title
    from milimetric.category_and_media as cm
    left join wmf_raw.mediawiki_page as mp on (cm.page_id=mp.page_id)
    where
        snapshot='2023-10' and
        wiki_db='commonswiki' and
        page_type='file'
),

-- Get glam image links with il_to (id) and il_to_title (name).
-- They are needed to augment the category graph with imagelink info (media file usage).
glam_image_links as (
    select
        il_from,
        wiki_db as il_from_wiki_db,
        page_id as il_to,
        page_title as il_to_title
    from glam_media_file_pages
    left join wmf_raw.mediawiki_imagelinks on (page_title=il_to)
    where
        snapshot='2023-10' and
        il_from_namespace=0 and
        wiki_db not in ('commonswiki', 'wikidatawiki')
),

-- Improve glam image links with il_from_title.
-- We need a second pass to add the il_from_title to the image links.
-- (I imagine it could be done in a single pass above, but for clarity).
glam_image_links_with_il_from_title as (
    select
        il_from,
        page_title as il_from_title,
        il_from_wiki_db,
        il_to,
        il_to_title
    from glam_image_links
    left join wmf_raw.mediawiki_page on (il_from=page_id and il_from_wiki_db=wiki_db)
    where snapshot='2023-10'
),

-- Improve sample category graph with wiki_db, project and page_title
-- At this stage, a media file can have multiple rows, one per each article featured.
sample_category_graph_plus as (
    select
        page_id,
        category_paths,
        il_from_wiki_db as wiki_db,
        substr(domain_name, 0, length(domain_name) - 4) as project, -- We need the project later to join with pageviews.
        il_from_title as page_title
    from milimetric.category_and_media
    left join glam_image_links_with_il_from_title on (page_id=il_to)
    left join canonical_data.wikis on (il_from_wiki_db=database_code)
    where page_type='file'
),

-- Files that are not used in any wiki or page.
-- Just separating them here for later.
unused_media_files as (
    select
        page_id,
        category_paths
    from sample_category_graph_plus
    where wiki_db is null
),

used_but_not_viewed_media_files as (
    select
        cg.page_id,
        category_paths,
        wiki_db,
        cg.page_title,
        0 as page_views
    from sample_category_graph_plus as cg
    anti join wmf.pageview_hourly as pv on (
        cg.page_title=pv.page_title and
        cg.project=pv.project and
        pv.year=2023 and
        pv.month=10
    )
    where wiki_db is not null
),

-- Add aggregated pageview counts for each page that features each media file.
-- Note that this grabs view counts for the time span of 1 month only!
used_and_viewed_media_files as (
    select
        cg.page_id,
        category_paths,
        wiki_db,
        cg.page_title,
        sum(view_count) as page_views
    from sample_category_graph_plus as cg
    left join wmf.pageview_hourly as pv on (
        cg.page_title=pv.page_title and
        cg.project=pv.project
    )
    where
        wiki_db is not null and
        year=2023 and
        month=10
    group by
        cg.page_id,
        category_paths,
        wiki_db,
        cg.page_title
),

sample_category_graph_plus_pageviews as (
    select * from used_but_not_viewed_media_files
    union all
    select * from used_and_viewed_media_files
),

-- Pack pageviews per page in a map (step 1 of packing all stats inside the map).
sample_category_graph_with_pageviews_map as (
    select
        page_id,
        category_paths,
        wiki_db,
        map_from_entries(collect_list(struct(page_title, page_views))) as pageviews_map
    from sample_category_graph_plus_pageviews
    group by
        page_id,
        category_paths,
        wiki_db
),

-- Pack page and pageviews map together with wiki_db in the final map (step 2).
sample_category_graph_with_pageview_image_links as (
    select
        page_id,
        category_paths,
        map_from_entries(collect_list(struct(wiki_db, pageviews_map))) as image_links_with_pageviews
    from sample_category_graph_with_pageviews_map
    group by
        page_id,
        category_paths
),

-- Put category rows (roots and subcats), used media file rows (with imagelinks and pageviews)
-- and unused media file rows (empty map) in the same final dataset.
full_sample_category_graph_with_pageview_image_links as (
    -- Primary categories (root) and other categories (subcat).
    select
        page_id,
        page_type,
        category_paths,
        null as usage_map
    from milimetric.category_and_media
    where page_type != 'file'
    union all
    -- Media files with imagelink info and pageview info.
    select
        page_id,
        'file' as page_type,
        category_paths,
        image_links_with_pageviews as usage_map
    from sample_category_graph_with_pageview_image_links
    union all
    -- Unused media files (without imagelink or pageview info).
    select
        page_id,
        'file' as page_type,
        category_paths,
        null as usage_map
    from unused_media_files
)

insert overwrite table mforns.category_and_media_with_usage_map_2
select * from full_sample_category_graph_with_pageview_image_links
;
