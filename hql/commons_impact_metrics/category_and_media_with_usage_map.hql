-- This query decorates the category_and_media dataset generated by CommonsCategoryGraphBuilder.scala
-- Spark-Scala script in the refinery-source repository with usage data: projects, pages and pageview counts.
-- It is meant to be persisted as a temporary table to used by downstream transformations.
--
-- Parameters:
--     category_and_media_table                   -- Read data from here
--     mediawiki_page_table                       -- Read data from here
--     mediawiki_imagelinks_table                 -- Read data from here
--     pageview_hourly_table                      -- Read data from here
--     canonical_data_wikis_table                 -- Read data from here
--     category_and_media_with_usage_map_table    -- Insert results here
--     category_and_media_with_usage_map_location -- Location to write results to
--     snapshot                                   -- YYYY-MM to compute for
--     coalesce_partitions                        -- Number of partitions to write
--
-- Usage:
--     spark3-sql -f category_and_media_with_usage_map.hql \
--                -d category_and_media_table=tmp.category_and_media \
--                -d mediawiki_page_table=wmf_raw.mediawiki_page \
--                -d mediawiki_imagelinks_table=wmf_raw.mediawiki_imagelinks \
--                -d pageview_hourly_table=wmf.pageview_hourly \
--                -d canonical_data_wikis_table=canonical_data.wikis \
--                -d category_and_media_with_usage_map_table=tmp.category_and_media_with_usage_map \
--                -d category_and_media_with_usage_map_location=/wmf/tmp/analytics/commons_impact_metrics \
--                -d snapshot=2024-02 \
--                -d coalesce_partitions=4

SET spark.sql.mapKeyDedupPolicy = LAST_WIN;

-- makes this script idempotent
DROP TABLE IF EXISTS ${category_and_media_with_usage_map_table};

CREATE EXTERNAL TABLE ${category_and_media_with_usage_map_table}
(
    `page_id`             BIGINT                        COMMENT 'commonswiki page_id of the category in question',
    `page_title`          STRING                        COMMENT 'commonswiki page_title of the category in question',
    `page_type`           STRING                        COMMENT 'root, subcat, file or page',
    `parent_categories`   ARRAY<BIGINT>                 COMMENT 'immediate parent categories of the category in question',
    `primary_categories`  ARRAY<BIGINT>                 COMMENT 'top/primary categories of the category in question',
    `usage_map`           MAP<STRING, MAP<STRING, INT>> COMMENT 'Articles using the file by wiki with their pageview counts'
) USING ICEBERG
LOCATION '${category_and_media_with_usage_map_location}'
;

-- Get the page title for all glam media files.
-- These are needed to join with the imagelinks table, and later to union with final output
WITH category_and_media_with_titles AS (
    SELECT cm.page_id,
           mp.page_title,
           cm.page_type,
           cm.parent_categories,
           cm.primary_categories
    FROM ${category_and_media_table} AS cm
             LEFT JOIN ${mediawiki_page_table} AS mp ON (cm.page_id = mp.page_id)
    WHERE snapshot = '${snapshot}'
      AND wiki_db = 'commonswiki'),

-- Get glam image links with il_to (id) and il_to_title (name).
-- They are needed to augment the category graph with imagelink info (media file usage).
-- NOTE: look for the hint that Amir gave us about the global imagelink table in commons?
     glam_image_links AS (
         SELECT il.il_from,
                il.wiki_db     AS il_from_wiki_db,
                cmt.page_id    AS il_to,
                cmt.page_title AS il_to_title
         FROM category_and_media_with_titles cmt
                  LEFT JOIN ${mediawiki_imagelinks_table} il ON (cmt.page_title = il.il_to)
         WHERE il.snapshot = '${snapshot}'
           AND il.il_from_namespace = 0
           AND il.wiki_db NOT IN ('commonswiki', 'wikidatawiki')
           AND cmt.page_type = 'file'),

-- Improve glam image links with il_from_title.
-- We need a second pass to add the il_from_title to the image links.
-- (I imagine it could be done in a single pass above, but for clarity).
     glam_image_links_with_il_from_title AS (
         SELECT il_from,
                page_title                                      AS il_from_title,
                il_from_wiki_db,
                -- We need the project later to join with pageviews.
                SUBSTR(domain_name, 0, LENGTH(domain_name) - 4) AS il_from_project,
                il_to,
                il_to_title
         FROM glam_image_links
                  LEFT JOIN ${mediawiki_page_table}
                            ON (il_from = page_id AND il_from_wiki_db = wiki_db)
                  LEFT JOIN ${canonical_data_wikis_table} ON (il_from_wiki_db = database_code)
         WHERE snapshot = '${snapshot}'),

     glam_image_links_with_pageviews AS (
         SELECT il_from,
                il_from_title,
                il_from_wiki_db,
                il_from_project,
                il_to,
                il_to_title,
                SUM(view_count) AS page_views

         FROM glam_image_links_with_il_from_title
                  LEFT JOIN ${pageview_hourly_table} AS pv ON (
                     il_from_title = pv.page_title AND
                     il_from_project = pv.project
             )
         WHERE il_from_wiki_db IS NOT NULL
           AND year = YEAR('${snapshot}')
           AND month = MONTH('${snapshot}')
           AND agent_type = 'user'
         GROUP BY il_from,
                  il_from_title,
                  il_from_wiki_db,
                  il_from_project,
                  il_to,
                  il_to_title),

     unused_media AS (
         SELECT il_to,
                il_to_title
         FROM glam_image_links_with_il_from_title
         WHERE il_from IS NULL),

-- Pack pageviews per page in a map (step 1 of packing all stats inside the map).
     media_with_per_page_usage_map AS (
         SELECT il_to,
                il_to_title,
                il_from_project,
                map_from_entries(COLLECT_LIST(STRUCT(il_from_title, page_views))) AS pageviews_map
         FROM glam_image_links_with_pageviews
         WHERE il_from_title IS NOT NULL
         GROUP BY il_to,
                  il_to_title,
                  il_from_project),

-- Pack page and pageviews map together with wiki_db in the final map (step 2).
     media_with_per_wiki_usage_map AS (
         SELECT il_to,
                il_to_title,
                map_from_entries(COLLECT_LIST(STRUCT(il_from_project, pageviews_map))) AS image_links_with_pageviews
         FROM media_with_per_page_usage_map
         GROUP BY il_to,
                  il_to_title),

     category_graph_with_pageview_image_links AS (
         SELECT cmt.page_id,
                cmt.page_title,
                cmt.page_type,
                cmt.parent_categories,
                cmt.primary_categories,
                mwu.image_links_with_pageviews AS usage_map
         FROM category_and_media_with_titles cmt
                  LEFT JOIN media_with_per_wiki_usage_map mwu ON (cmt.page_id = mwu.il_to)
         WHERE cmt.page_type = 'file'),

-- Put category rows (roots and subcats), used media file rows (with imagelinks and pageviews)
-- and unused media file rows (empty map) in the same final dataset.
     full_category_graph_with_pageview_image_links AS (
         -- Primary categories (root) and other categories (subcat).
         SELECT page_id,
                page_title,
                page_type,
                parent_categories,
                primary_categories,
                NULL AS usage_map
         FROM category_and_media_with_titles
         WHERE page_type != 'file'
         UNION ALL
         -- LEFT JOIN works: Media files with imagelink info and pageview info.
         -- LEFT JOIN fails: Unused media files (without imagelink or pageview info).
         SELECT cmt.page_id,
                cmt.page_title,
                cmt.page_type,
                cmt.parent_categories,
                cmt.primary_categories,
                mwu.image_links_with_pageviews AS usage_map
         FROM category_and_media_with_titles cmt
                  LEFT JOIN media_with_per_wiki_usage_map mwu ON (cmt.page_id = mwu.il_to)
         WHERE cmt.page_type = 'file')

INSERT
INTO ${category_and_media_with_usage_map_table}
SELECT /*+ COALESCE(${coalesce_partitions}) */
       *
FROM full_category_graph_with_pageview_image_links
;
