-- Creates table statement for raw mediawiki_revision table.
--
-- Parameters:
--     <none>
--
-- Usage
--     hive -f create_mediawiki_revision_table.hql \
--         --database wmf_raw
--

CREATE EXTERNAL TABLE `mediawiki_revision` (
  `rev_id`              bigint      COMMENT 'This field, along with wiki, holds the primary key for each revision. page_latest is a foreign key to this field.',
  `rev_page`            bigint      COMMENT 'This field holds a reference to the page to which this revision pertains. The number in this field is equal to the page_id field of said page. This should never be invalid\; if it is, that revision won\'t show up in the page history. If page.page_latest links to a revision with an invalid rev_page, this will cause the "The revision #0 of the page named \'Foo\' does not exist" error.',
  `rev_text_id`         bigint      COMMENT 'This is a foreign key to old_id in the text table. (The text table is where the actual bulk text is stored.) It\'s possible for multiple revisions to use the same textâ€”for instance, revisions where only metadata is altered, or where a rollback is done to a previous version.',
  `rev_comment`         string      COMMENT 'This field holds an editor\'s edit summary (editor\'s comment on revision). This text is shown in the history and contributions. (The recentchanges table contains a copy used for recent changes, related changes, watchlists, and, in the case of page creation, for the list of new pages.) It is rendered in a sanitized subset of wiki markup.',
  `rev_user`            bigint      COMMENT 'This is equal to the user_id of the user who made this edit. The value for this field is 0 for anonymous edits, initializations scripts, and for some mass imports.  Note, there are bugs: T112384.',
  `rev_user_text`       string      COMMENT 'This field holds the text of the editor\'s username, or the IP address of the editor if the revision was done by an unregistered user.',
  `rev_timestamp`       string      COMMENT 'Holds the timestamp of the edit.',
  `rev_minor_edit`      boolean     COMMENT 'Records whether the user marked the \'minor edit\' checkbox. If the value for this field is 1, then the edit was declared as \'minor\'\; it is 0 otherwise. Many automated edits are marked as minor.',
  `rev_deleted`         int     COMMENT 'This field is reserved for the RevisionDelete system. It\'s a bitfield in which the values are DELETED_TEXT = 1\; DELETED_COMMENT = 2\; DELETED_USER = 4\; and DELETED_RESTRICTED = 8. So, for example, if nothing has been deleted from that revision, then the value is 0\; if both the comment and user have been deleted, then the value is 6.',
  `rev_len`             bigint      COMMENT 'This field contains the length of the article after the revision, in bytes. Used in history pages. Corresponds to rc_new_len.',
  `rev_parent_id`       bigint      COMMENT 'The rev_id of the previous revision to the page. Corresponds to rc_last_oldid.  For edits which are new page creations, rev_parent_id = 0.',
  `rev_sha1`            string      COMMENT 'This field is used to add the SHA-1 text content hash in base-36 (generated by the base-convert library.)',
  `rev_content_model`   string      COMMENT 'Content model, see CONTENT_MODEL_XXX constants in Defines.php. These IDs will be exposed in the API and XML dumps. Extensions that define their own content model IDs should take care to avoid conflicts. Using the extension name as a prefix is recommended, for example \'myextension-somecontent\'. Possible values are, e.g., \'wikitext\', \'javascript\', \'css\', \'text\', and \'json\'.',
  `rev_content_format`  string      COMMENT 'Content format, see CONTENT_FORMAT_XXX constants in Defines.php. These should be MIME types, and will be exposed in the API and XML dumps. Extensions are free to use the below formats, or define their own. It is recommended to stick with the conventions for MIME types. Possible values are, e.g., \'text/x-wiki\', \'text/javascript\', \'text/css\', \'text/plain\', \'text/html\', \'application/vnd.php.serialized\', \'application/json\', and \'application/xml\'.',
  `rev_actor`           bigint      COMMENT 'This is a foreign key to actor_id in the actor table.',
  `rev_comment_id`      bigint      COMMENT 'This is a foreign key to comment_id in the comment table.'
)
COMMENT
  'See most up to date documentation at https://www.mediawiki.org/wiki/Manual:Revision_table'
PARTITIONED BY (
  `snapshot` string COMMENT 'Versioning information to keep multiple datasets (YYYY-MM for regular labs imports)',
  `wiki_db` string COMMENT 'The wiki_db project')
ROW FORMAT SERDE
  'org.apache.hadoop.hive.serde2.avro.AvroSerDe'
STORED AS INPUTFORMAT
  'org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat'
OUTPUTFORMAT
  'org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat'
LOCATION
  'hdfs://analytics-hadoop/wmf/data/raw/mediawiki/tables/revision'
;
