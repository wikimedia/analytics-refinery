<?xml version="1.0" encoding="UTF-8"?>
<workflow-app xmlns="uri:oozie:workflow:0.4"
    name="archive_job_output-wf">

    <parameters>

        <property>
            <name>check_done</name>
            <value>true</value>
            <description>
                Whether or not to check for the done file
            </description>
        </property>
        <property>
            <name>done_file</name>
            <value>_SUCCESS</value>
            <description>
                The name of the file to flag a directory as “done”.
            </description>
        </property>
        <property>
            <name>expected_filename_ending</name>
            <value>.gz</value>
            <description>
                The expected filename ending of the data file.
                Either "EMPTY" (for no ending), ".gz", or ".snappy"
            </description>
        </property>

        <!-- Default values for inner oozie settings -->
        <property>
            <name>oozie_launcher_queue_name</name>
            <value>${queue_name}</value>
        </property>
        <property>
            <name>oozie_launcher_memory</name>
            <value>2048</value>
        </property>

        <!-- Required properties -->
        <property><name>queue_name</name></property>
        <property><name>name_node</name></property>
        <property><name>job_tracker</name></property>

        <property>
            <name>source_directory</name>
            <description>
                Directory in hdfs that contains the data that should
                get archived.

                This directory will get removed upon success.
            </description>
        </property>
        <property>
            <name>archive_file</name>
            <description>
                File name where the source_directory's data should get
                archived to.
            </description>
        </property>
        <!-- By default archived data is public, therefore readable by all -->
        <property>
            <name>archive_parent_umask</name>
            <value>022</value>
            <description>
                umask applied for parent folder creation (if any)
            </description>
        </property>
        <property>
            <name>archive_perms</name>
            <value>644</value>
            <description>
                Permissions to apply to the archive file
            </description>
        </property>

    </parameters>


    <start to="check_source_directory"/>

    <decision name="check_source_directory">
        <switch>
            <case to="source_directory_does_not_exist">
                ${not fs:exists(source_directory)}
            </case>
            <case to="source_directory_is_not_a_directory">
                ${not fs:isDir(source_directory)}
            </case>
            <case to="identify_content_file">
                ${check_done ne 'true'}
            </case>
            <case to="source_directory_is_not_done">
                ${not fs:exists(concat(concat(source_directory,'/'),done_file))}
            </case>

            <default to="identify_content_file"/>
        </switch>
    </decision>

    <action name="identify_content_file">
        <!--
        We'd prefer to identify the content file with pure Oozie HDFS
        checks, but as some jobs have files 000000_0, while others
        have 000000_7, hardcoding logic that captures basic heuristics
        got too tedious. Therefore, we resort to parsing the output of
        'hdfs dfs -ls' in this shell action. Once Oozie provides a
        'find' primitive or something the like, please take advantange
        of it and replace the following shell action. -->
        <shell xmlns="uri:oozie:shell-action:0.1">
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <!--make sure oozie:launcher runs in a low priority queue -->
                <property>
                    <name>oozie.launcher.mapred.job.queue.name</name>
                    <value>${oozie_launcher_queue_name}</value>
                </property>
                <property>
                    <name>oozie.launcher.mapreduce.map.memory.mb</name>
                    <value>${oozie_launcher_memory}</value>
                </property>
            </configuration>
            <exec>identify_content_file.sh</exec>
            <argument>${source_directory}</argument>
            <argument>${expected_filename_ending eq 'EMPTY' ? '' : expected_filename_ending}</argument>
            <argument>${done_file}</argument>
            <file>identify_content_file.sh#identify_content_file.sh</file>
            <capture-output/>
        </shell>
        <ok to="create_archive_parent_folder"/>
        <error to="kill"/>
    </action>

    <action name="create_archive_parent_folder">
        <!--
        We'd prefer to create the archive parent directory in pure oozie
        but we can't configure the fs action to use the fs.permissions.umask-mode
        property, so we use a bash script to do so.
         -->
        <shell xmlns="uri:oozie:shell-action:0.1">
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <!--make sure oozie:launcher runs in a low priority queue -->
                <property>
                    <name>oozie.launcher.mapred.job.queue.name</name>
                    <value>${oozie_launcher_queue_name}</value>
                </property>
                <property>
                    <name>oozie.launcher.mapreduce.map.memory.mb</name>
                    <value>${oozie_launcher_memory}</value>
                </property>
            </configuration>
            <exec>make_hdfs_dir_with_umask.sh</exec>
            <argument>${replaceAll(archive_file, '/[^/]*$', '')}</argument>
            <argument>${archive_parent_umask}</argument>
            <file>make_hdfs_dir_with_umask.sh#make_hdfs_dir_with_umask.sh</file>
            <capture-output/>
        </shell>
        <ok to="archive"/>
        <error to="kill"/>
    </action>

    <action name="archive">
        <fs>
            <configuration>
                <!--make sure oozie:launcher runs in a low priority queue -->
                <property>
                    <name>oozie.launcher.mapred.job.queue.name</name>
                    <value>${oozie_launcher_queue_name}</value>
                </property>
                <property>
                    <name>oozie.launcher.mapreduce.map.memory.mb</name>
                    <value>${oozie_launcher_memory}</value>
                </property>
            </configuration>
            <delete path="${archive_file}"/>
            <move
                source="${concat(concat(source_directory,'/'),wf:actionData('identify_content_file')['content_file'])}"
                target="${archive_file}"/>
            <!--
                Apply permissions to archived file
                This is needed as file have already been created with possibly other perms
            -->
            <chmod path="${archive_file}" permissions="${archive_perms}" dir-files="false"/>
            <delete path="${source_directory}"/>
        </fs>
        <ok to="end"/>
        <error to="kill"/>
    </action>

    <kill name="source_directory_does_not_exist">
        <message>The job output directory ${source_directory} does not exist</message>
    </kill>

    <kill name="source_directory_is_not_a_directory">
        <message>The given source_directory ${source_directory} is not a directory</message>
    </kill>

    <kill name="source_directory_is_not_done">
        <message>The job output directory ${source_directory} lacks the ${done_file} marker</message>
    </kill>

    <kill name="kill">
        <message>error message[${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>
