# Example of properties to be configured when using the util/swift/upload/workflow.xml
# subworkflow.
#
# Usage:
# sudo -u analytics oozie job --oozie $OOZIE_URL \
#   -Dswift_auth_file='/path/to/swift/auth.env' \
#   -Dswift_container='example_swift_container' \
#   -Dsource_directory='hdfs:///path/to/directory/to/upload' \
#   -Dswift_object_prefix='new/object/in/swift' \
#   -config util/swift/upload/workflow.properties \
#   -run
#
# NOTE:  The $oozie_directory must be synced to HDFS so that all relevant
#        .xml files exist there when this job is submitted.

name_node                         = hdfs://analytics-hadoop
job_tracker                       = resourcemanager.analytics.eqiad.wmnet:8032
queue_name                        = default

# Base path in HDFS to refinery.
# When submitting this job for production, you should override this to point directly at a deployed
# directory name, and not the 'symbolic' 'current' directory. E.g. /wmf/refinery/2015-01-05T17.59.18Z--7bb7f07
refinery_directory                = ${name_node}/wmf/refinery/current

# Base path in HDFS to oozie files.
# Other files will be used relative to this path.
oozie_directory                   = ${refinery_directory}/oozie

# HDFS path to workflow to run.
workflow_file                     = ${oozie_directory}/util/swift/upload/workflow.xml

# Workflow to mark a directory as done
mark_directory_done_workflow_file = ${oozie_directory}/util/mark_directory_done/workflow.xml

# Path to swift auth file to source environment variables from for tempauth.
# This file should export ST_AUTH, ST_USER, and ST_KEY.
#swift_auth_file                   = /path/to/swift_auth_example.env

# Name of container in Swift to upload source_directory to.
#swift_container                   = example_swift_container

# Path to directory to upload to swift
#source_directory                  = /path/to/source/directory

# Name of object prefix in Swift to upload source_directory as.  All children
# of source_directory will be direct children of this object prefix.
#swift_object_prefix               = example_swift_object_prefix

# If true, the current timestamp in milliseconds will be prepended to the swift_object_prefix.
# This timestamp is used as a sortable 'unique id' version, useful for when you don't want
# previous uploads for the same prefix to be overwritten.
#swift_auto_verion                = false

# If set to true and objects exist in container with prefix,
# they will be deleted before the source directory is uploaded.
#swift_overwrite                  = false

# Instruct swift to delete the file after this many seconds.  Defaults to 90 days.
#swift_delete_after                      = 7776000

# If true, then one swift/upload/complete event will be emitted per uploaded object.
# If false (default) then only one event per upload will be emitted.
#event_per_object                 = false

# Name of event stream to send events to.  Default: swift.<swift_container>.upload-complete
#event_stream




# Coordinator to start.
oozie.wf.application.path         = ${workflow_file}
oozie.use.system.libpath          = true
oozie.action.external.stats.write = true
