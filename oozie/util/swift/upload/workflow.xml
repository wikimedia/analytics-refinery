<?xml version="1.0" encoding="UTF-8"?>
<workflow-app xmlns="uri:oozie:workflow:0.4"
    name="swift-upload-wf">

    <parameters>

        <!-- Default values for inner oozie settings -->
        <property>
            <name>oozie_launcher_queue_name</name>
            <value>${queue_name}</value>
        </property>
        <property>
            <name>oozie_launcher_memory</name>
            <value>2048</value>
        </property>

        <property>
            <name>swift_overwrite</name>
            <value>false</value>
            <description>
                If true, the --swift-overwrite flag will be passed to swift-upload.py,
                and existing objects in swift will be deleted before the source
                directory is uploaded.  Default: false.
            </description>
        </property>

        <property>
            <name>swift_delete_after</name>
            <value>7776000</value>
            <description>
                Will cause the swift upload to pass the X-Delete-After header set
                to this many seconds.  Defaults to 90 days.
            </description>
        </property>

        <property>
            <name>swift_auto_version</name>
            <value>false</value>
            <description>
                If true, the current timestamp in milliseconds will be
                prepended to the swift_object_prefix.
            </description>
        </property>

        <property>
            <name>event_per_object</name>
            <value>false</value>
            <description>
                If this is 'true', then a swift/upload/complete event will be
                emitted for every object uploaded.  If 'false', then only
                one event will be emitted for this upload.
            </description>
        </property>

        <property>
            <name>event_service_url</name>
            <value>https://eventgate-analytics.discovery.wmnet:4592/v1/events</value>
            <description>
                URL to which the swift/upload/events will be posted
                (unless ${event_stream} == 'false')
            </description>
        </property>

        <property>
            <name>upload_user</name>
            <value>${user}</value>
            <description>
                Username initiating the swift upload
            </description>
        </property>

        <!-- Required properties -->
        <property><name>queue_name</name></property>
        <property><name>name_node</name></property>
        <property><name>job_tracker</name></property>

        <property>
            <name>mark_directory_done_workflow_file</name>
            <description>Workflow for marking a directory done</description>
        </property>

        <property>
            <name>swift_uploaded_file</name>
            <value>_SWIFT_UPLOADED</value>
            <description>
                The name of the file to flag a source directory as uploaded to swift.
            </description>
        </property>

        <property>
            <name>swift_auth_file</name>
            <description>
                Filename that contains export env var statements for
                swift CLI tempauth. I.e. ST_AUTH, ST_USER, ST_KEY.
            </description>
        </property>

        <property>
            <name>swift_container</name>
            <description>
                The name of the container in swift in which to upload.
            </description>
        </property>

        <property>
            <name>source_directory</name>
            <description>
                Path to the source directory to upload
            </description>
        </property>

        <property>
            <name>swift_object_prefix</name>
            <description>
                Name to upload the object as in swift
            </description>
        </property>


        <property>
            <name>event_stream</name>
            <value>swift.${swift_container}.upload-complete</value>
            <description>
                Name of the stream the swift/upload/complete event will be sent to.
                Set this to 'false' to disable event sending.
            </description>
        </property>

    </parameters>


    <start to="check_source_directory"/>

    <decision name="check_source_directory">
        <switch>
            <case to="source_directory_does_not_exist">
                ${not fs:exists(source_directory)}
            </case>
            <case to="source_directory_is_not_a_directory">
                ${not fs:isDir(source_directory)}
            </case>
            <default to="check_swift_auth_file"/>
        </switch>
    </decision>
        <decision name="check_swift_auth_file">
        <switch>
            <case to="swift_auth_file_does_not_exist">
                ${not fs:exists(swift_auth_file)}
            </case>
            <default to="run_swift_upload"/>
        </switch>
    </decision>

    <action name="run_swift_upload">
        <shell xmlns="uri:oozie:shell-action:0.2">
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <!--make sure oozie:launcher runs in a low priority queue -->
                <property>
                    <name>oozie.launcher.mapred.job.queue.name</name>
                    <value>${oozie_launcher_queue_name}</value>
                </property>
                <property>
                    <name>oozie.launcher.mapreduce.map.memory.mb</name>
                    <value>${oozie_launcher_memory}</value>
                </property>
                <property>
                    <name>mapred.job.queue.name</name>
                    <value>${queue_name}</value>
                </property>
            </configuration>
            <exec>swift_upload.py</exec>
            <argument>--upload-user</argument>
            <argument>${upload_user}</argument>
            <argument>--swift-overwrite</argument>
            <argument>${swift_overwrite}</argument>
            <argument>--swift-delete-after</argument>
            <argument>${swift_delete_after}</argument>
            <argument>--swift-auto-version</argument>
            <argument>${swift_auto_version}</argument>
            <argument>--swift-object-prefix</argument>
            <argument>${swift_object_prefix}</argument>
            <argument>--event-per-object</argument>
            <argument>${event_per_object}</argument>
            <argument>--event-stream</argument>
            <argument>${event_stream}</argument>
            <argument>--event-service-url</argument>
            <argument>${event_service_url}</argument>
            <argument>swift_auth.env</argument>
            <argument>${swift_container}</argument>
            <argument>${source_directory}</argument>
            <file>swift_upload.py#swift_upload.py</file>
            <file>${swift_auth_file}#swift_auth.env</file>
        </shell>
        <ok to="mark_swift_upload_done"/>
        <error to="kill"/>
    </action>

    <!--
    This adds an empty ${swift_uploaded_file} done-flag file into ${source_directory}
    -->
    <action name="mark_swift_upload_done">
        <sub-workflow>
            <app-path>${mark_directory_done_workflow_file}</app-path>
            <configuration>
                <property>
                    <name>directory</name>
                    <value>${source_directory}</value>
                </property>
                <property>
                    <name>done_file</name>
                    <value>${swift_uploaded_file}</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="end"/>
        <error to="kill"/>
    </action>

    <kill name="source_directory_does_not_exist">
        <message>The given source_directory ${source_directory} does not exist</message>
    </kill>

    <kill name="source_directory_is_not_a_directory">
        <message>The given source_directory ${source_directory} is not a directory</message>
    </kill>

    <kill name="swift_auth_file_does_not_exist">
        <message>The swift auth file ${swift_auth_file} does not exist</message>
    </kill>

    <kill name="kill">
        <message>error message[${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>

</workflow-app>
