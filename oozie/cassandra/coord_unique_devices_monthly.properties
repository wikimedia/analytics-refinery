# Configures a coordinator to manage loading cassandra for the monthly unique devices
# API. Any of the following properties are overidable with -D.
# Usage:
# sudo -u analytics oozie job --oozie $OOZIE_URL \
#   -Dstart_time='2019-12-04T00:00Z' \
#   -config oozie/cassandra/coord_unique_devices_monthly.properties \
#   -run
#

name_node                          = hdfs://analytics-hadoop
job_tracker                        = resourcemanager.analytics.eqiad.wmnet:8032
hive_principal                     = hive/analytics-hive.eqiad.wmnet@WIKIMEDIA
hive2_jdbc_url                     = jdbc:hive2://analytics-hive.eqiad.wmnet:10000/default
queue_name                         = default

user                               = analytics

# Base path in HDFS to refinery.
# When submitting this job for production, you should
# override this to point directly at a deployed
# directory name, and not the 'symbolic' 'current' directory.
# E.g.  /wmf/refinery/2015-01-05T17.59.18Z--7bb7f07
refinery_directory                 = ${name_node}/wmf/refinery/current

# HDFS path to artifacts that will be used by this job.
# E.g. refinery-hive.jar should exist here.
artifacts_directory               = ${refinery_directory}/artifacts

# Base path in HDFS to oozie files.
# Other files will be used relative to this path.
oozie_directory                   = ${refinery_directory}/oozie

# HDFS path to the refinery job jar that will be used by this job.
refinery_cassandra_jar_path        = ${artifacts_directory}/org/wikimedia/analytics/refinery/refinery-cassandra-0.1.1.jar
cassandra_reducer_class            = org.wikimedia.analytics.refinery.cassandra.ReducerToCassandra
cassandra_output_format_class      = org.wikimedia.analytics.refinery.cassandra.CqlOutputFormat

# Jar path that contains the UDF to generate country names.
refinery_hive_jar_path             = ${artifacts_directory}/org/wikimedia/analytics/refinery/refinery-hive-0.1.1.jar

# HDFS path to coordinators to run.
coordinator_file_hourly            = ${oozie_directory}/cassandra/hourly/coordinator.xml
coordinator_file_daily             = ${oozie_directory}/cassandra/daily/coordinator.xml
coordinator_file_monthly           = ${oozie_directory}/cassandra/monthly/coordinator.xml

# HDFS path to workflows to run.
workflow_file_hourly               = ${oozie_directory}/cassandra/hourly/workflow.xml
workflow_file_daily                = ${oozie_directory}/cassandra/daily/workflow.xml
workflow_file_monthly              = ${oozie_directory}/cassandra/monthly/workflow.xml

# Workflow to send an error email
send_error_email_workflow_file     = ${oozie_directory}/util/send_error_email/workflow.xml

# HDFS path to datasets definitions
unique_devices_data_directory      = ${name_node}/wmf/data/wmf/unique_devices
unique_devices_datasets_file       = ${oozie_directory}/unique_devices/datasets.xml
# provides the frequency of the dataset used to manage
#different datasets correctly in coordinator
dataset_freq                       = month

# Initial import time of the webrequest dataset.
start_time                         = 2015-05-01T00:00Z

# Time to stop running this coordinator.  Year 3000 == never!
stop_time                          = 3000-01-01T00:00Z

# HDFS path to hive-site.xml file.  This is needed to run hive actions.
hive_site_xml                      = ${name_node}/user/hive/hive-site.xml
# Temporary directory
temporary_directory                = ${name_node}/wmf/tmp/analytics

# Cassandra cluster info
cassandra_host                     = aqs1004-a.eqiad.wmnet
cassandra_port                     = 9042
cassandra_username                 = aqsloader
cassandra_password                 = cassandra
cassandra_nodes                    = 6
batch_size                         = 1024
cassandra_write_consistency        = LOCAL_QUORUM

# Hive value separator
hive_value_separator               = \\t
# Cassandra table to be loaded (not job dependant)
cassandra_table                    = data

# Constant field names and value to be loaded into cassandra
constant_output_domain_field       = _domain
constant_output_domain_value       = analytics.wikimedia.org,text
constant_output_granularity_field  = granularity
constant_output_tid_field          = _tid
constant_output_tid_value          = 0,timeuuid

workflow_file                      = ${workflow_file_monthly}
datasets_file                      = ${unique_devices_datasets_file}

# The job actually depends on 2 datasets:
#  - unique_devices_per_domain_monthly
#  - unique_devices_per_project_family_monthly
# This double dependency is solved by make the computation of the
# unique_devices_per_domain_monthly being dependent on the
# unique_devices_per_project_family_monthly already being computed
# (see oozie/unique_devices/per_domain/monthly/coordinator.xml)
dataset_name                       = unique_devices_per_domain_monthly

hive_script                        = unique_devices.hql
source_table                       = wmf.this_property_is_not_used_in_uniques
source_table_per_domain            = wmf.unique_devices_per_domain_monthly
source_table_per_project_family    = wmf.unique_devices_per_project_family_monthly
cassandra_parallel_loaders         = 1
cassandra_keyspace                 = local_group_default_T_unique_devices
cassandra_cql                      = UPDATE "${cassandra_keyspace}"."data" SET "devices" = ?, "offset" = ?, "underestimate" = ?
hive_fields                        = project,access-site,timestamp,devices,offset,underestimate
hive_fields_types                  = text,text,text,bigint,bigint,bigint
cassandra_fields                   = devices,offset,underestimate
cassandra_primary_keys             = _domain,project,access-site,granularity,timestamp,_tid


# Cassandra3 loading with spark
hive_metastore_uri                 = thrift://analytics-hive.eqiad.wmnet:9083
oozie_spark_lib                    = spark-2.4.4
spark_master                       = yarn
spark_deploy                       = cluster
spark_job_name                     = cassandra3-local_group_default_T_unique_devices-monthly
spark_job_class                    = org.wikimedia.analytics.refinery.job.HiveToCassandra
spark_job_jar                      = ${artifacts_directory}/org/wikimedia/analytics/refinery/refinery-job-0.1.17.jar
spark_assembly_zip                 = ${name_node}/user/spark/share/lib/spark2-assembly.zip
spark_executor_memory              = 8G
spark_executor_cores               = 4
spark_driver_memory                = 4G
spark_max_executors                = 32
cassandra3_host                    = aqs1010-a.eqiad.wmnet:9042
cassandra3_username                = aqsloader
cassandra3_password                = cassandra
cassandra3_columns                 = _domain,project,access-site,granularity,timestamp,_tid,devices,offset,underestimate

################################## BEGINNING OF QUERY
# Using \ as last character makes the property being multi-line (beware of trailing spaces!)
# Using _YEAR_ and _MONTH_ values to be replaced by actual values
# Need to escape \ char 4 times (!!!) due to the multiple systems the string passes through

cassandra3_hql                     = WITH unique_devices_per_domain AS ( \
    SELECT \
        CONCAT( \
            regexp_extract(domain, '^((?!www)([a-z0-9-_]+)\\\\\\\\.)(m\\\\\\\\.)?\\\\\\\\w+\\\\\\\\.org$$'), \
            regexp_extract(domain, '([a-z0-9-_]+)\\\\\\\\.org$$') \
            ) AS project, \
        CASE WHEN domain RLIKE '(^(m)\\\\\\\\.)|\\\\\\\\.m\\\\\\\\.' \
            THEN 'mobile-site' \
            ELSE 'desktop-site' \
            END AS access_site, \
        CONCAT(LPAD(year, 4, '0'), LPAD(month, 2, '0'), '01') AS dt, \
        SUM(uniques_estimate) AS devices, \
        SUM(uniques_offset) AS offset, \
        SUM(uniques_underestimate) AS underestimate \
    FROM \
        wmf.unique_devices_per_domain_monthly \
    WHERE \
        year = _YEAR_ \
        AND month = _MONTH_ \
    GROUP BY \
        CONCAT( \
            regexp_extract(domain, '^((?!www)([a-z0-9-_]+)\\\\\\\\.)(m\\\\\\\\.)?\\\\\\\\w+\\\\\\\\.org$$'), \
            regexp_extract(domain, '([a-z0-9-_]+)\\\\\\\\.org$$') \
            ), \
        CASE WHEN domain RLIKE '(^(m)\\\\\\\\.)|\\\\\\\\.m\\\\\\\\.' \
            THEN 'mobile-site' \
            ELSE 'desktop-site' \
            END, \
        CONCAT(LPAD(year, 4, '0'), LPAD(month, 2, '0'), '01') \
    HAVING SUM(uniques_estimate) > 1000 \
), unique_devices_per_domain_all_sites AS ( \
    SELECT \
        project, \
        'all-sites' AS access_site, \
        dt, \
        SUM(devices) AS devices, \
        SUM(offset) AS offset, \
        SUM(underestimate) AS underestimate \
    FROM \
        unique_devices_per_domain \
    GROUP BY \
        project, \
        dt \
), unique_devices_per_project_family AS ( \
    SELECT \
        CONCAT('all-', project_family, '-projects') AS project, \
        'all-sites' AS access_site, \
        CONCAT(LPAD(year, 4, '0'), LPAD(month, 2, '0'), '01') AS dt, \
        SUM(uniques_estimate) AS devices, \
        SUM(uniques_offset) AS offset, \
        SUM(uniques_underestimate) AS underestimate \
    FROM \
        wmf.unique_devices_per_project_family_monthly \
    WHERE \
        year = _YEAR_ \
        AND month = _MONTH_ \
        AND !array_contains(array('mediawiki', 'wikidata', 'wikimediafoundation', 'wikimedia'), project_family) \
    GROUP BY \
        CONCAT('all-', project_family, '-projects'), \
        CONCAT(LPAD(year, 4, '0'), LPAD(month, 2, '0'), '01') \
    HAVING SUM(uniques_estimate) > 1000 \
), unique_devices AS ( \
    SELECT * FROM unique_devices_per_domain \
    UNION ALL \
    SELECT * FROM unique_devices_per_domain_all_sites \
    UNION ALL \
    SELECT * FROM unique_devices_per_project_family \
) \
SELECT \
    'analytics.wikimedia.org' as _domain, \
    project, \
    access_site, \
    'monthly' as granularity, \
    dt as timestamp, \
    '13814000-1dd2-11b2-8080-808080808080' as _tid, \
    devices, \
    offset, \
    underestimate \
FROM unique_devices

######################### END OF QUERY


# SLA email to make sure we receive email if the job timeouts
sla_alert_contact                 = analytics-alerts@wikimedia.org

# Coordintator to start.
oozie.coord.application.path       = ${coordinator_file_monthly}
oozie.use.system.libpath           = true
oozie.action.external.stats.write  = true
