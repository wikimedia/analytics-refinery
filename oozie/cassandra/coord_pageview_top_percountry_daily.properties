# Configures a coordinator to manage loading Cassandra for the top-per-country daily
# pageview AQS endpoint. Any of the following properties are overidable with -D.
#
# Launch in production (to re-run/back-fill add -Dstop_time='YYYY-MM-DDT00:00Z'):
# sudo -u analytics kerberos-run-command analytics oozie job --oozie $OOZIE_URL \
#     -Drefinery_directory=hdfs://analytics-hadoop$(hdfs dfs -ls -d /wmf/refinery/$(date +"%Y")* | tail -n 1 | awk '{print $NF}') \
#     -Dqueue_name='production' \
#     -Dstart_time='YYYY-MM-DDT00:00Z' \
#     -config oozie/cassandra/coord_pageview_top_percountry_daily.properties \
#     -run
#
# Test code changes:
# sudo -u analytics kerberos-run-command analytics oozie job --oozie $OOZIE_URL \
#     -Doozie_directory='hdfs://analytics-hadoop/user/myuser/oozie' \
#     -Dsla_alert_contact='myuser@wikimedia.org' \
#     -Dsend_error_email_workflow_file='do_not_send' \
#     -Dstart_time='YYYY-MM-DDT00:00Z' \
#     -Dstop_time='YYYY-MM-DDT00:00Z' \
#     -config oozie/cassandra/coord_pageview_top_percountry_daily.properties \
#     -run
#

name_node                         = hdfs://analytics-hadoop
job_tracker                       = resourcemanager.analytics.eqiad.wmnet:8032
hive_principal                    = hive/analytics-hive.eqiad.wmnet@WIKIMEDIA
hive2_jdbc_url                    = jdbc:hive2://analytics-hive.eqiad.wmnet:10000/default
queue_name                        = default

user                              = analytics

# Base path in HDFS to refinery.
# When submitting this job for production, you should
# override this to point directly at a deployed
# directory name, and not the 'symbolic' 'current' directory.
# E.g.  /wmf/refinery/2015-01-05T17.59.18Z--7bb7f07
refinery_directory                = ${name_node}/wmf/refinery/current

# HDFS path to artifacts that will be used by this job.
# E.g. refinery-hive.jar should exist here.
artifacts_directory               = ${refinery_directory}/artifacts

# Base path in HDFS to oozie files.
# Other files will be used relative to this path.
oozie_directory                   = ${refinery_directory}/oozie

# HDFS path to the refinery job jar that will be used by this job.
refinery_cassandra_jar_path       = ${artifacts_directory}/org/wikimedia/analytics/refinery/refinery-cassandra-0.1.1.jar
cassandra_reducer_class           = org.wikimedia.analytics.refinery.cassandra.ReducerToCassandra
cassandra_output_format_class     = org.wikimedia.analytics.refinery.cassandra.CqlOutputFormat

# Jar path that contains the UDF to generate country names.
refinery_hive_jar_path            = ${artifacts_directory}/org/wikimedia/analytics/refinery/refinery-hive-0.1.1.jar

# HDFS path to coordinators to run.
coordinator_file_daily            = ${oozie_directory}/cassandra/daily/coordinator.xml

# HDFS path to workflows to run.
workflow_file_daily               = ${oozie_directory}/cassandra/daily/workflow.xml

# Workflow to send an error email
send_error_email_workflow_file    = ${oozie_directory}/util/send_error_email/workflow.xml

# HDFS path to datasets definitions
pageview_datasets_file            = ${oozie_directory}/pageview/datasets.xml
pageview_data_directory           = ${name_node}/wmf/data/wmf/pageview
dataset_freq                      = hour

# Initial import time of the webrequest dataset.
start_time                        = 2021-01-01T00:00Z

# Time to stop running this coordinator.  Year 3000 == never!
stop_time                         = 3000-01-01T00:00Z

# HDFS path to hive-site.xml file.  This is needed to run hive actions.
hive_site_xml                     = ${name_node}/user/hive/hive-site.xml
# Temporary directory
temporary_directory               = ${name_node}/tmp

# Cassandra cluster info
cassandra_host                    = aqs1004-a.eqiad.wmnet
cassandra_port                    = 9042
cassandra_username                = aqsloader
cassandra_password                = cassandra
cassandra_nodes                   = 6
batch_size                        = 1024
cassandra_write_consistency       = LOCAL_QUORUM

# Hive value separator
hive_value_separator              = \\t
# Cassandra table to be loaded (not job dependant)
cassandra_table                   = data

# Constant field names and value to be loaded into cassandra
constant_output_domain_field      = _domain
constant_output_domain_value      = analytics.wikimedia.org,text
constant_output_granularity_field = granularity
constant_output_tid_field         = _tid
constant_output_tid_value         = 0,timeuuid

workflow_file                     = ${workflow_file_daily}
datasets_file                     = ${pageview_datasets_file}
dataset_name                      = pageview_actor
hive_script                       = pageview_top_percountry.hql
source_table                      = wmf.pageview_actor
country_blacklist_table           = wmf.geoeditors_blacklist_country
cassandra_parallel_loaders        = 6
cassandra_keyspace                = local_group_default_T_top_percountry
cassandra_cql                     = UPDATE "${cassandra_keyspace}"."data" SET "articles" = ?
hive_fields                       = country,access,year,month,day,articles
hive_fields_types                 = text,text,text,text,text,text
cassandra_fields                  = articles
cassandra_primary_keys            = _domain,country,access,year,month,day,_tid

# Cassandra3 loading with spark
hive_metastore_uri                = thrift://analytics-hive.eqiad.wmnet:9083
oozie_spark_lib                   = spark-2.4.4
spark_master                      = yarn
spark_deploy                      = cluster
spark_job_name                    = cassandra3-local_group_default_T_top_percountry-daily
spark_job_class                   = org.wikimedia.analytics.refinery.job.HiveToCassandra
spark_job_jar                     = ${artifacts_directory}/org/wikimedia/analytics/refinery/refinery-job-0.1.17.jar
spark_assembly_zip                = ${name_node}/user/spark/share/lib/spark2-assembly.zip
spark_executor_memory             = 8G
spark_executor_cores              = 4
spark_driver_memory               = 4G
spark_max_executors               = 32
cassandra3_host                   = aqs1010-a.eqiad.wmnet:9042
cassandra3_username               = aqsloader
cassandra3_password               = cassandra
cassandra3_columns                = _domain,country,access,year,month,day,_tid,articles


################################## BEGINNING OF QUERY
# Using \ as last character makes the property being multi-line (beware of trailing spaces!)
# Using _YEAR_, _MONTH_ and _DAY_ values to be replaced by actual values
# Need to escape \ char 4 times (!!!) due to the multiple systems the string passes through
#
# Note: Can't add comments in the query, adding them here
#   - Remove special unknown pageview '-' from base_data (see T117346)
#   - The NOT EXISTS join in base_data executes as a map join, and was chosen
#     after benchmarking against LEFT JOIN and NOT IN
#   - Explicitely naming max_rank CTE fields differently from ranked CTE
#     as spark doesn't interpret table-names in join clause

cassandra3_hql                    = WITH base_data AS ( \
    SELECT \
        geocoded_data['country_code'] AS country_code, \
        REGEXP_REPLACE(access_method, ' ', '-') AS access, \
        pageview_info['project'] AS project, \
        REFLECT('org.json.simple.JSONObject', 'escape', REGEXP_REPLACE(pageview_info['page_title'], '\\\\t', '')) AS page_title, \
        LPAD(year, 4, '0') as year, \
        LPAD(month, 2, '0') as month, \
        LPAD(day, 2, '0') as day, \
        actor_signature \
    FROM wmf.pageview_actor source \
    WHERE \
        year = _YEAR_ \
        AND month = _MONTH_ \
        AND day = _DAY_ \
        AND agent_type = 'user' \
        AND pageview_info IS NOT NULL \
        AND geocoded_data IS NOT NULL \
        AND is_pageview \
        AND pageview_info['page_title'] != '-' \
        AND geocoded_data['country_code'] != '--' \
        AND NOT EXISTS ( \
            SELECT 1 \
            FROM wmf.geoeditors_blacklist_country country_blacklist \
            WHERE country_blacklist.country_code = source.geocoded_data['country_code'] \
        ) \
), \
raw AS ( \
    SELECT \
        country_code, \
        COALESCE(access, 'all-access') AS access, \
        project, \
        page_title, \
        year, \
        month, \
        day, \
        COUNT(1) AS total_view_count, \
        COUNT(DISTINCT actor_signature) AS unique_actor_count \
    FROM base_data \
    GROUP BY \
        country_code, \
        access, \
        project, \
        page_title, \
        year, \
        month, \
        day \
    GROUPING SETS ( \
        ( \
            country_code, \
            access, \
            project, \
            page_title, \
            year, \
            month, \
            day \
        ), \
        ( \
            country_code, \
            project, \
            page_title, \
            year, \
            month, \
            day \
        ) \
    ) \
), \
ranked AS ( \
    SELECT \
        country_code, \
        access, \
        project, \
        page_title, \
        year, \
        month, \
        day, \
        CEIL(total_view_count / 100) * 100 AS views_ceil, \
        rank() OVER (PARTITION BY access, country_code, year, month, day ORDER BY total_view_count DESC) as rank, \
        row_number() OVER (PARTITION BY access, country_code, year, month, day ORDER BY total_view_count DESC) as rn \
    FROM raw \
    WHERE unique_actor_count > 1000 \
), \
max_rank AS ( \
    SELECT \
        country_code as max_rank_country_code, \
        access as max_rank_access, \
        year as max_rank_year, \
        month as max_rank_month, \
        day as max_rank_day, \
        rank as max_rank \
    FROM ranked \
    WHERE rn = 1001 \
    GROUP BY \
        country_code, \
        access, \
        year, \
        month, \
        day, \
        rank \
) \
SELECT \
  'analytics.wikimedia.org' as _domain, \
  country_code as country, \
  access as access, \
  year as year, \
  month as month, \
  day as day, \
  '13814000-1dd2-11b2-8080-808080808080' as _tid, \
  CONCAT( \
      '[', \
      CONCAT_WS( \
          ',', \
          COLLECT_LIST( \
              CONCAT( \
                  '{"article":"', \
                  page_title, \
                  '","project":"', \
                  project, \
                  '","views_ceil":', \
                  CAST(views_ceil AS STRING), \
                  ',"rank":', \
                  CAST(rank AS STRING), \
                  '}' \
              ) \
          ) \
      ), \
      ']' \
  ) as articles \
FROM ranked \
LEFT JOIN max_rank ON ( \
    country_code = max_rank_country_code \
    AND access = max_rank_access \
    AND year = max_rank_year \
    AND month = max_rank_month \
    AND day = max_rank_day \
) \
WHERE \
    rank < COALESCE(max_rank, 1001) \
GROUP BY \
    country_code, \
    access, \
    year, \
    month, \
    day

######################### END OF QUERY


# SLA email to make sure we receive email if the job timeouts
sla_alert_contact                 = analytics-alerts@wikimedia.org

# Coordintator to start.
oozie.coord.application.path      = ${coordinator_file_daily}
oozie.use.system.libpath          = true
oozie.action.external.stats.write = true
